{"version":3,"sources":["components/Scroll.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Header.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Scroll","_ref","children","react_default","a","createElement","style","overflowY","border","height","Card","id","name","email","className","src","concat","alt","CardList","robots","console","log","map","user","i","components_Card","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Header","nextProps","nextState","Component","ErrorBoundary","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","App","onRequestRobots","_this$props","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_Header","components_SearchBox","components_Scroll","ErrorBoundary_ErrorBoundary","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","err","Boolean","window","location","hostname","match","initialState","rootReducer","createLogger","combineReducers","arguments","length","undefined","action","objectSpread","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2c3bca08.chunk.js","sourcesContent":["import React from 'react';\n\nconst Scroll = ({ children }) => {\n  return (\n    <div\n      style={{\n        overflowY: 'scroll',\n        border: '5px solid black',\n        height: '800px',\n      }}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React from 'react';\n\nconst Card = ({ id, name, email }) => {\n  return (\n    <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img src={`https://robohash.org/${id}?200x200`} alt=\"robots\" />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from 'react';\n\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  console.log('CardList');\n  return (\n    <div>\n      {robots.map((user, i) => (\n        <Card key={i} id={user.id} name={user.name} email={user.email} />\n      ))}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({ searchField, searchChange }) => {\n  console.log('SearchBox');\n  return (\n    <div className=\"pa2\">\n      <input\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"search robots\"\n        onChange={searchChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React, { Component } from 'react';\n\nclass Header extends Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    return false;\n  }\n\n  render() {\n    console.log('Header');\n    return (\n      <div>\n        <h1 className=\"f1\">RoboFriends</h1>\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\n\nexport default class ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) return <h1>Oooops. That is not good.</h1>;\n    return this.props.children;\n  }\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\n// custom components\nimport Scroll from '../components/Scroll';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Header from '../components/Header';\nimport ErrorBoundary from '../components/ErrorBoundary';\n\n//actions\nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots()),\n  };\n};\n\nclass App extends Component {\n  async componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n\n    return isPending ? (\n      <h1>Loading</h1>\n    ) : (\n      <div className=\"tc\">\n        <Header />\n        <SearchBox searchField={searchField} searchChange={onSearchChange} />\n        <Scroll>\n          <ErrorBoundary>\n            <CardList robots={filteredRobots} />\n          </ErrorBoundary>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from './constants';\n\nexport const setSearchField = text => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text,\n});\n\nexport const requestRobots = () => dispatch => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(err => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: err }));\n};\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from './constants';\n\nconst initialState = {\n  searchField: '',\n  robots: [],\n};\n\nexport const searchRobots = (state = initialState, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return { ...state, searchField: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport const requestRobots = (state = initialState, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return { ...state, isPending: true };\n    case REQUEST_ROBOTS_SUCCESS:\n      return { ...state, robots: action.payload, isPending: false };\n    case REQUEST_ROBOTS_FAILED:\n      return { ...state, error: action.payload, isPending: false };\n    default:\n      return state;\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}